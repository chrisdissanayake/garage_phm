# Calibration

```{r}
#| results: "asis"
#| echo: false
source("_common.R")

library(patchwork)
```

## ADXL335

The ADXL335 is a triaxial accelerometer with three analog outputs that correspond to the orthogonal X, Y, and Z axes. The accelerometer responds to [tilt](https://www.digikey.com/en/articles/using-an-accelerometer-for-inclination-sensing){target="_blank"}, and since it is mounted in parallel to the door (reference), this measurement translates to a dynamic angle of incline. 

The technical datasheet for ADXL335 is [here](https://www.analog.com/media/en/technical-documentation/data-sheets/ADXL335.pdf).

## Preliminary Calibration

The calibration procedure is highlighted [here](https://learn.adafruit.com/adxl345-digital-accelerometer/programming){target="_blank"}. This also serves the purpose of verifying the functionality of the accelerometer.


```{cpp eval = FALSE}
#include <math.h>
const int x_out = A0; 
const int y_out = A1; 
const int z_out = A2; 

unsigned long tms;

void setup() {
  Serial.begin(115200); 
}

void loop() {
  int x_adc_value, y_adc_value, z_adc_value; 
  
  x_adc_value = analogRead(x_out);  
  y_adc_value = analogRead(y_out);  
  z_adc_value = analogRead(z_out);  

//  Serial.print("x = ");
//  Serial.print(x_adc_value);
//  Serial.print("\t\t");
//  Serial.print("y = ");
//  Serial.print(y_adc_value);
//  Serial.print("\t\t");
//  Serial.print("z = ");
//  Serial.print(z_adc_value);
//  Serial.println("\t\t");

// Right hand rule is constrained

  int x = map(x_adc_value, 264, 396, -100, 100);
  float xg = (float)x/(-100.00);
  
  int y = map(y_adc_value, 267, 400, -100, 100);
  float yg = (float)y/(-100.00);

  int z = map(z_adc_value, 275, 410, -100, 100);
  float zg = (float)z/(-100.00);


// CW is positive

double tilt_fc, tilt_tw;

//  tilt_X =atan2(-yg,-zg)*57.2957795; /* yaw dof cannot be measured */ 
  tilt_fc = -1*atan2(xg,yg)*57.2957795; /* across the face of the door */
  tilt_tw = -1*atan2(zg,yg)*57.2957795; /* towards and back */
  

  tms = millis();

  Serial.print(tms); 
  Serial.print("\t");
  Serial.print(xg);
  Serial.print("\t");
  Serial.print(yg);
  Serial.print("\t");
  Serial.print(zg);
  Serial.print("\t");
  Serial.print(tilt_fc);
  Serial.print("\t");
  Serial.print(tilt_tw);
  Serial.print("\n");
  
//  delay(1000);

}
```


## Tilt Orientation Calibration

The door moves is relative to the left and right tracks, and this can cause many problems if the accelerometer is not positioned correctly. 

### Install Adjustable Mount

The accelerometer mount is adjustable, and can be installed closer to the arm bracket, the closer the better. The reference tilt angle (`tilt_fc`) can be adjusted by loosening the M3 screws.

<div>
  <figure>
  <img src="./images_for_document/adxl335-mnt.png" width="49.7%"/>
  <img src="./images_for_document/adxl335-mnt2.jpg" width="49.7%"/>
  </figure>
</div>


Here are three outputs for three angles, -17 deg (CCW), 0 deg, and 17 deg (CW).

```{r}
p_1 <- pre_proc_tbl("angle-ccw17") |> 
  plot_ad() +
  labs(title = "-17 deg") +
  theme(axis.title = element_blank())

p_2 <- pre_proc_tbl("2023-06-10_garagedoor-1") |> 
  plot_ad() +
  labs(title = "0 deg") +
  theme(axis.title = element_blank())

p_3 <- pre_proc_tbl("angle-cw17") |> 
  plot_ad() +
  labs(title = "+17 deg") +
  theme(axis.title = element_blank())

p <- p_1 /p_2/ p_3 

gt <- patchwork::patchworkGrob(p)
gridExtra::grid.arrange(gt, left = "Acceleration (g)", bottom = "time (s)")

```


### Run Algorithm

The following procedure is a solution to this problem, proposed to exploit the nonlinear dependence between sensor variables, namely x-y and x-z. The solution also works without any preprocessing, which is also an advantage. 

Below is an example calculation for the mutual information between x and y for the signal at 0 degrees. A lower value indicates better "alignment".

```{r}
d <- pre_proc_tbl("2023-06-10_garagedoor-1") 
```


```{python}
import numpy as np
import scipy.stats as ss
from sklearn.metrics import mutual_info_score

def numBins(nObs, corr=None):
    #optimal number of bins for discretization
    if corr is None: #univariate case
        z = (8+324*nObs+12*(36*nObs+729*nObs**2)**.5)**(1/3.)
        b = round(z/6.+2./(3*z)+1./3)
    else: #bivariate case
        b = round(2**-.5*(1+(1+24*nObs/(1.-corr**2))**.5)**.5)
    
    return int(b)

def mutualInfor(x,y, norm=False):
  #mutual information
  bXY = numBins(x.shape[0], corr = np.corrcoef(x,y)[0,1])
  cXY = np.histogram2d(x,y, bXY)[0]
  iXY = mutual_info_score(None, None, contingency=cXY)
  if norm:
    hX = ss.entropy(np.histogram(x, bins)[0]) #marginal 
    hY = ss.entropy(np.histogram(y, bins)[0]) #marginal
    iXY /= min(hX, hY) #normalized mutual information
    
  return iXY

x = r.d['x']
x = np.array(x)

y = r.d['y']
y = np.array(y)

bins=10 # descretize sample space

nmi = mutualInfor(x,y,True)

d = {"nmi": nmi}

d
```


### Evaluate Results

To determine the most optimal angle, a sweep needs to be done at varying increments. Typically, this is done within a range of approximately Â±10 degrees.

```{r}
d_long <- read_csv("../data/mu-i_angle_swp.csv") %>%
  pivot_longer(cols = c("xy", "yz", "xz"), names_to = "name", values_to = "value")

preds <- list()
for (name_2 in unique(d_long$name)) {
  nd <- d_long |> dplyr::filter(name == name_2)
  mars_model <- earth::earth(value ~ angle, data = nd, nk = 3)
  preds[[name_2]] <- mars_model |> predict()
}

angles <- d_long |> 
  filter(name == "xy") |> 
  pull(angle)

preds_df <- data.frame(name = rep(names(preds), sapply(preds, length)),
                 value = unlist(preds), angle =  angles)

d_long |> 
  ggplot(aes(angle, value, col = name)) +
  geom_point() +
  geom_line(data = preds_df, aes(angle, value)) +
  scale_x_continuous(breaks = scales::pretty_breaks(n = 20)) +
  labs(x = "Angle (deg)", 
       y = "Mutual Information" ,
       col = "Variables", 
       title = "Angle Sweep Results")

```

The curve typically follows a hinge function. In our example, it may not be appropriate to select the zero degree position, and it is recommended to re-measure the top three angles. For this instance, the sensor was positioned at a five-degree clockwise (CW) offset.




